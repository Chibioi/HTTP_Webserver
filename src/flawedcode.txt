// package main

// import (
// 	"bufio"
// 	"bytes"
// 	"errors"
// 	"fmt"
// 	"io"
// 	"net"
// 	"net/http"
// 	"syscall"
// )

// // A parsed HTTP request header

// type HTTPerror struct {
// 	StatusCode int
// 	Message    string
// }

// // dynamic sized buffer

// type Dynbuff struct {
// 	data   bytes.Buffer
// 	length int
// }

// // appending data to dynamic buffer
// func Buffpush(buff *Dynbuff, data *bytes.Buffer) { // This pushes data to the buffer
// 	Databytes := data.Bytes()            // databytes creates an empty buffer
// 	_, err := buff.data.Write(Databytes) // bytes.Buffer.Write returns two values (int, err)
// 	if err != nil {
// 		// Handle the error appropriately, perhaps return it
// 		fmt.Println("Error writing to buffer:", err)
// 		return
// 	}
// 	buff.length += len(Databytes) // buffer length increases as you push data to the buffer
// }

// func SplitMessage(buff *Dynbuff) ([]byte, bool) { // SplitMessage() processes the Dynbuff to extract complete messages separated by the newline character (\n)
// 	// fmt.Printf("SplitMessage: buff.length=%d, buff.data.Cap()=%d, buff.data.Len()=%d\n", buff.length, buff.data.Cap(), buff.data.Len())
// 	index := bytes.IndexByte(buff.data.Bytes()[:buff.length], '\n') // locate the first occurence (first index) of the newline char (\n)

// 	if index == -1 { // Incomplete message: newline not found
// 		return nil, false
// 	}

// 	message := make([]byte, index+1) // Creates a new Buffer containing the message up to (and including) the newline
// 	// fmt.Printf("SplitMessage: index=%d, attempting to create message of size %d\n", index, len(message))
// 	_, err := buff.data.Read(message) // This advances the buffer read pointer
// 	if err != nil {
// 		return nil, false // should not happen if the buffer is within bounds
// 	}

// 	Buffpop(buff, index+1) // Pops the processed image

// 	return message, true
// }

// func Buffpop(buff *Dynbuff, length int) {
// 	if length <= 0 {
// 		return // returns nothing if the length value is 0 or a negative number
// 	}
// 	if length >= buff.length { // checks if the no. of bytes you want to remove is greater than or equal to the buffer's valid length
// 		buff.data.Reset() // Effectively clears the buffer
// 		buff.length = 0
// 		return
// 	}

// 	remaining := buff.data.Bytes()[length:] // This effectively represents the data that remains after you conceptually remove the first length bytes.
// 	copy(buff.data.Bytes(), remaining)      // Copy remaining data to the beginning
// 	buff.length -= length                   // buff.length is updated by subtracting the number(len) of bytes from it
// 	buff.data.Truncate(buff.length)         // Truncate the buffer to the new length
// }

// func (e *HTTPerror) Error() string {
// 	return fmt.Sprintf("status %d: %s", e.StatusCode, e.Message)
// }

// func StatusError() error {
// 	// some logic
// 	return &HTTPerror{StatusCode: http.StatusBadRequest, Message: "Unexpected EOF."}
// }

// func Serveclient(conn net.Conn) {
// 	defer conn.Close()
// 	buff := &Dynbuff{data: bytes.Buffer{}, length: 0}

// 	for {
// 		message, found := SplitMessage(buff)
// 		if !found {
// 			data := make([]byte, 1024)
// 			n, err := conn.Read(data)
// 			if err != nil {
// 				if err != io.EOF {
// 					fmt.Println("Error reading from connection:", err)
// 				}
// 				fmt.Println("Client disconnected")
// 				return // Exit goroutine on read error or disconnect
// 			}
// 			if n > 0 {
// 				Buffpush(buff, bytes.NewBuffer(data[:n]))
// 				continue
// 			}
// 			fmt.Println("Client disconnected (no new data).")
// 			continue // Exit goroutine on disconnect (COME BACK TO THIS)
// 		}

// 		fmt.Printf("Received complete message: %q\n", message)

// 		// Handle "quit" command for echo protocol
// 		if bytes.Equal(message, []byte("quit\n")) {
// 			_, err := conn.Write([]byte("Bye.\n"))
// 			if err != nil {
// 				fmt.Println("Error writing to connection:", err)
// 			}
// 			return // Exit goroutine after sending "Bye."
// 		}

// 		// Try to parse as HTTP request
// 		requestReader := bufio.NewReader(bytes.NewReader(message))
// 		httpRequest, err := http.ReadRequest(requestReader)
// 		if err == nil {
// 			// Successfully parsed as HTTP
// 			remainingBytes := buff.length - len(message)
// 			fmt.Printf("HTTP Request Parsed. Bytes remaining in buffer: %d\n", remainingBytes)

// 			requestBody, err := ReadFromRequest(conn, httpRequest)
// 			if err != nil {
// 				fmt.Println("Error reading request body:", err)
// 				continue // Or handle error by sending HTTP error response
// 			}
// 			if requestBody == nil {
// 				fmt.Println("Failed to read request body (nil reader)")
// 				continue // Or handle error by sending HTTP error response
// 			}
// 			defer func() {
// 				if closer, ok := requestBody.(io.Closer); ok {
// 					closer.Close()
// 				}
// 			}()

// 			resp, err := handleReq(httpRequest, requestBody)
// 			if err != nil {
// 				fmt.Println("Error handling request:", err)
// 				continue // Or handle error by sending HTTP error response
// 			}

// 			err = writeHTTPResponse(conn, resp)
// 			if err != nil {
// 				if ne, ok := err.(net.Error); ok && ne.Timeout() {
// 					fmt.Println("Write timeout:", err)
// 					return // Exit goroutine on write timeout
// 				} else if errors.Is(err, syscall.EPIPE) || errors.Is(err, io.ErrClosedPipe) {
// 					fmt.Println("Error writing response (broken pipe):", err)
// 					return // Exit goroutine on broken pipe
// 				} else {
// 					fmt.Println("Error writing response:", err)
// 					return // Exit goroutine on other write errors
// 				}
// 			}
// 			resp.Body.Close()
// 			continue // Continue to the next message/request
// 		} else {
// 			// Not a valid HTTP request, treat as a simple echo
// 			reply := append([]byte("Echo: "), message...)
// 			_, err := conn.Write(reply)
// 			if err != nil {
// 				if ne, ok := err.(net.Error); ok && ne.Timeout() {
// 					fmt.Println("Write timeout:", err)
// 					return // Exit goroutine on write timeout
// 				} else if errors.Is(err, syscall.EPIPE) || errors.Is(err, io.ErrClosedPipe) {
// 					fmt.Println("Error writing echo response (broken pipe):", err)
// 					return // Exit goroutine on broken pipe
// 				} else {
// 					fmt.Println("Error writing echo response:", err)
// 					return // Exit goroutine on other write errors
// 				}
// 			}
// 		}
// 	}
// }

// // Body Reader from an HTTP request

// func ReadFromRequest(conn net.Conn, req *http.Request) (io.ReadCloser, error) {
// 	ContentLen := req.ContentLength
// 	Chunked := req.TransferEncoding
// 	bodyAllowed := !(req.Method == "GET" || req.Method == "HEAD")
// 	bodyBuffer := &bytes.Buffer{}

// 	if bodyAllowed {
// 		if ContentLen > 0 {
// 			n, err := io.CopyN(bodyBuffer, conn, ContentLen)
// 			if err != nil {
// 				return nil, fmt.Errorf("error reading content-length body: %v", err)
// 			}
// 			if n < ContentLen {
// 				fmt.Printf("Warning: Read %d bytes, expected %d\n", n, ContentLen)
// 			}
// 			return io.NopCloser(bodyBuffer), nil
// 		} else if len(Chunked) > 0 {
// 			isChunked := false
// 			for _, enc := range Chunked {
// 				if enc == "chunked" {
// 					isChunked = true
// 					break
// 				}
// 			}
// 			if isChunked {
// 				fmt.Println("Chunked encoding detected, needs implementation")
// 				return nil, errors.New("chunked encoding not implemented")
// 			} else {
// 				fmt.Println("No Content-Length and not chunked, but Transfer-Encoding present (not chunked)")
// 				n, err := io.Copy(bodyBuffer, conn)
// 				if err != nil {
// 					return nil, fmt.Errorf("error reading until EOF: %v", err)
// 				}
// 				fmt.Printf("Read %d bytes until EOF\n", n)
// 				return io.NopCloser(bodyBuffer), nil
// 			}
// 		} else {
// 			fmt.Println("No Content-Length or Transfer-Encoding for body-allowed method")
// 			return io.NopCloser(bytes.NewBuffer(nil)), nil // Empty reader
// 		}
// 	}
// 	return io.NopCloser(bytes.NewBuffer(nil)), nil // No body allowed
// }

// func readerFromMemory(data []byte) io.ReadCloser {
// 	return io.NopCloser(bytes.NewBuffer(data)) // NopCloser returns a ReadCloser with a no-op Close method wrapping the provided Reader data.
// }

// func handleReq(req *http.Request, body io.ReadCloser) (*http.Response, error) {
// 	var respBody io.ReadCloser
// 	header := http.Header{}
// 	header.Set("connection", "close")

// 	switch req.URL.Path {
// 	case "/echo":
// 		respBody = io.NopCloser(body) // Directly use the request body for echo
// 		if req.ContentLength > 0 {
// 			header.Set("Content-Length", fmt.Sprintf("%d", req.ContentLength))
// 		}
// 	default:
// 		response := []byte("hello world.\n")
// 		respBody = readerFromMemory(response)
// 		header.Set("Content-Length", fmt.Sprintf("%d", len(response))) // Add Content-Length
// 	}

// 	resp := &http.Response{
// 		StatusCode: http.StatusOK,
// 		Header:     header,
// 		Body:       respBody,
// 	}

// 	return resp, nil
// }

// func writeHTTPResponse(conn net.Conn, resp *http.Response) error {
// 	_, err := fmt.Fprintf(conn, "HTTP/1.1 %d %s\r\n", resp.StatusCode, http.StatusText(resp.StatusCode))
// 	if err != nil {
// 		return err
// 	}
// 	for key, values := range resp.Header {
// 		for _, value := range values {
// 			_, err := fmt.Fprintf(conn, "%s: %s\r\n", key, value)
// 			if err != nil {
// 				return err
// 			}
// 		}
// 	}
// 	_, err = fmt.Fprintf(conn, "\r\n") // End of headers
// 	if err != nil {
// 		return err
// 	}
// 	_, err = io.Copy(conn, resp.Body)
// 	if err != nil {
// 		return err
// 	}
// 	return resp.Body.Close()
// }
